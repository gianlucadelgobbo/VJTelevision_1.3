package VJTV {	import flash.display.MovieClip;	import flash.display.StageAlign;    import flash.display.StageScaleMode;	import flash.xml.XMLDocument;	import flash.events.*;	import flash.utils.*;	import flash.net.LocalConnection;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.display.Loader;	import flash.external.ExternalInterface;	import flash.net.navigateToURL;	import flash.net.URLRequest;	//import flash.system.fscommand;	//	import FLxER.core.Monitor;	import FLxER.panels.Mess;	import FLxER.panels.PrefOption;	import FLxER.main.Rett;	import FLxER.comp.Alt;	import VJTV.VJTVOptions;	import VJTV.VJTVLoading;	import VJTV.VJTVMonitor;	import VJTV.VJTVInterface;	import com.google.analytics.AnalyticsTracker; 	import com.google.analytics.GATracker; 	public class VJTVStarter extends MovieClip {		public var monitor					:VJTVMonitor;		public var flxerInterface			:VJTVInterface;		public var myAlt					:Alt;		//		var myOptions						:VJTVOptions;		var myTVLogo						:TVLogo;		var myLoader						:URLLoader		var myLoading						:VJTVLoading		//		public var tracker:AnalyticsTracker;		public function VJTVStarter() {			stage.showDefaultContextMenu = false;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.deviceOrientation = StageOrientation.ROTATED_LEFT			//fscommand("trapallkeys", true);			Preferences.createPref(stage.stageWidth,stage.stageHeight);			Preferences.pref.lastTime = 0;			/*if (stage.displayState != "fullScreenInteractive") {				myOptions = new VJTVOptions(200, 150, "VJ TELEVISION 1.0",setMode);				this.addChild(myOptions);				Preferences.pref.fs = false;			} else {*/				Preferences.pref.fs = true;				setMode(0);			//}		}		public function setMode(n:uint) {			if (myOptions) if (this.contains(myOptions)) this.removeChild(myOptions);			myTVLogo = new TVLogo();			myTVLogo.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHandler);			myTVLogo.mouseChildren = false;			myTVLogo.buttonMode=true;			this.addChild(myTVLogo);			Preferences.pref.myMode = n;			Preferences.pref.nCh = 2;			loadLib()		}		public function loadLib() {			myLoader = new URLLoader(new URLRequest("http://www.vjtelevision.com/playlists/index.xml"));			//myLoader = new URLLoader(new URLRequest("/playlists/index.xml"));			myLoader.addEventListener("complete", startup);			myLoader.addEventListener("ioError", xmlNotLoaded);		}		function xmlNotLoaded(event:Event):void {			trace("Data not loaded."+event);		}		public function startup(event:Event) {			Preferences.pref.libraryList = new XMLDocument();			Preferences.pref.libraryList.ignoreWhite = true;			Preferences.pref.libraryList.parseXML(myLoader.data);			interfaceDrawer()		}		public function resizer(event:Event) {			Preferences.pref.w = stage.stageWidth;			Preferences.pref.h = stage.stageHeight;			Preferences.pref.monitorTrgt.resizer(stage.stageWidth,stage.stageHeight);			Preferences.pref.interfaceTrgt.setPos()		}		function interfaceDrawer() {			this.myAlt  = new Alt();			Preferences.pref.myAlt = this.myAlt;			Preferences.pref.ch = 0;			monitor = new VJTVMonitor(0,0,Preferences.pref.w, Preferences.pref.h);			flxerInterface = new VJTVInterface();			for (var a=0; a<Preferences.pref.nCh; a++) {				monitor.levels["ch_"+a].trgtListener = Preferences.pref.interfaceTrgt;			}			this.addChild(monitor);			this.addChild(flxerInterface);			this.addChild(myAlt);			this.removeChild(myTVLogo);			this.addChild(myTVLogo);			if (!Preferences.pref.fullscreenBtn) {				monitor.addEventListener(MouseEvent.MOUSE_DOWN,flxerInterface.showToolbarAndHide);				monitor.mouseChildren = false;				monitor.buttonMode=true;			}			if (Preferences.pref.trackID) {				tracker = new GATracker(this, Preferences.pref.trackID, "AS3", false ); 				if (Preferences.pref.isEmbed) {					trace("Preferences.pref.trackPageview"+Preferences.pref.trackPageview)					tracker.trackPageview(Preferences.pref.trackPageviewPrefix+Preferences.pref.trackPageview);				}			}		}		private function mouseDownHandler(e:Event) {			navigateToURL(new URLRequest(Preferences.pref.libraryList.childNodes[0].attributes.page_url),"_blank")		}		public static function myReplace(str, search, replace) {			var temparray = str.split(search);			str = temparray.join(replace);			return str;		}	}}